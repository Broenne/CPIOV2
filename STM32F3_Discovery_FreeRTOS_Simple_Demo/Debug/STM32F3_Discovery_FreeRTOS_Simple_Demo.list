
STM32F3_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002360  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000008  20000000  080024f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  6 .bss          00001df4  20000008  20000008  00020008  2**3
                  ALLOC
  7 ._user_heap_stack 00000200  20001dfc  20001dfc  00020008  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004d3d  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f0d  00000000  00000000  00024d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000430  00000000  00000000  00025c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  000260b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c87  00000000  00000000  00026458  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a12  00000000  00000000  000280df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00029af1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000fac  00000000  00000000  00029b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024d0 	.word	0x080024d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080024d0 	.word	0x080024d0

080001c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f103 0208 	add.w	r2, r3, #8
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f04f 32ff 	mov.w	r2, #4294967295
 80001e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f103 0208 	add.w	r2, r3, #8
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f103 0208 	add.w	r2, r3, #8
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	611a      	str	r2, [r3, #16]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	6078      	str	r0, [r7, #4]
 800022a:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]
}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3b04      	subs	r3, #4
 8000344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800034c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3b04      	subs	r3, #4
 8000352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3b14      	subs	r3, #20
 800036a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f06f 0202 	mvn.w	r2, #2
 800037e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3b20      	subs	r3, #32
 8000384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <pxCurrentTCBConst2>)
 8000396:	6819      	ldr	r1, [r3, #0]
 8000398:	6808      	ldr	r0, [r1, #0]
 800039a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800039e:	f380 8809 	msr	PSP, r0
 80003a2:	f04f 0000 	mov.w	r0, #0
 80003a6:	f380 8811 	msr	BASEPRI, r0
 80003aa:	4770      	bx	lr

080003ac <pxCurrentTCBConst2>:
 80003ac:	20001c2c 	.word	0x20001c2c
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop

080003b4 <vPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <vPortStartFirstTask+0x14>)
 80003b6:	6800      	ldr	r0, [r0, #0]
 80003b8:	6800      	ldr	r0, [r0, #0]
 80003ba:	f380 8808 	msr	MSP, r0
 80003be:	b662      	cpsie	i
 80003c0:	df00      	svc	0
 80003c2:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003c4:	bf00      	nop
 80003c6:	0000      	.short	0x0000
 80003c8:	e000ed08 	.word	0xe000ed08

080003cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <xPortStartScheduler+0x40>)
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <xPortStartScheduler+0x40>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003da:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80003dc:	4a0b      	ldr	r2, [pc, #44]	; (800040c <xPortStartScheduler+0x40>)
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <xPortStartScheduler+0x40>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80003e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80003e8:	f000 f890 	bl	800050c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <xPortStartScheduler+0x44>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80003f2:	f000 f89f 	bl	8000534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <xPortStartScheduler+0x48>)
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <xPortStartScheduler+0x48>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000400:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8000402:	f7ff ffd7 	bl	80003b4 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	bd80      	pop	{r7, pc}
 800040c:	e000ed20 	.word	0xe000ed20
 8000410:	20000000 	.word	0x20000000
 8000414:	e000ef34 	.word	0xe000ef34

08000418 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <vPortYieldFromISR+0x18>)
 800041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed04 	.word	0xe000ed04

08000434 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8000438:	f04f 0050 	mov.w	r0, #80	; 0x50
 800043c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <vPortEnterCritical+0x20>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a03      	ldr	r2, [pc, #12]	; (8000454 <vPortEnterCritical+0x20>)
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	20000000 	.word	0x20000000

08000458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <vPortExitCritical+0x28>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3b01      	subs	r3, #1
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <vPortExitCritical+0x28>)
 8000464:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <vPortExitCritical+0x28>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d103      	bne.n	8000476 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 800046e:	f04f 0000 	mov.w	r0, #0
 8000472:	f380 8811 	msr	BASEPRI, r0
	}
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	20000000 	.word	0x20000000

08000484 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000484:	f3ef 8009 	mrs	r0, PSP
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <pxCurrentTCBConst>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	f01e 0f10 	tst.w	lr, #16
 8000490:	bf08      	it	eq
 8000492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049a:	6010      	str	r0, [r2, #0]
 800049c:	e92d 4008 	stmdb	sp!, {r3, lr}
 80004a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80004a4:	f380 8811 	msr	BASEPRI, r0
 80004a8:	f000 fef0 	bl	800128c <vTaskSwitchContext>
 80004ac:	f04f 0000 	mov.w	r0, #0
 80004b0:	f380 8811 	msr	BASEPRI, r0
 80004b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80004b8:	6819      	ldr	r1, [r3, #0]
 80004ba:	6808      	ldr	r0, [r1, #0]
 80004bc:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c0:	f01e 0f10 	tst.w	lr, #16
 80004c4:	bf08      	it	eq
 80004c6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80004ca:	f380 8809 	msr	PSP, r0
 80004ce:	4770      	bx	lr

080004d0 <pxCurrentTCBConst>:
 80004d0:	20001c2c 	.word	0x20001c2c
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop

080004d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <SysTick_Handler+0x30>)
 80004e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004e4:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	f04f 0050 	mov.w	r0, #80	; 0x50
 80004ee:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80004f2:	f000 fe23 	bl	800113c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80004f6:	f04f 0000 	mov.w	r0, #0
 80004fa:	f380 8811 	msr	BASEPRI, r0
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	e000ed04 	.word	0xe000ed04

0800050c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <prvSetupTimerInterrupt+0x1c>)
 8000512:	4a06      	ldr	r2, [pc, #24]	; (800052c <prvSetupTimerInterrupt+0x20>)
 8000514:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <prvSetupTimerInterrupt+0x24>)
 8000518:	2207      	movs	r2, #7
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e014 	.word	0xe000e014
 800052c:	0002903f 	.word	0x0002903f
 8000530:	e000e010 	.word	0xe000e010

08000534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000544 <vPortEnableVFP+0x10>
 8000538:	6801      	ldr	r1, [r0, #0]
 800053a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053e:	6001      	str	r1, [r0, #0]
 8000540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000542:	bf00      	nop
 8000544:	e000ed88 	.word	0xe000ed88

08000548 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f023 0307 	bic.w	r3, r3, #7
 8000564:	3308      	adds	r3, #8
 8000566:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8000568:	f000 fd44 	bl	8000ff4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <pvPortMalloc+0x70>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8000578:	d212      	bcs.n	80005a0 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <pvPortMalloc+0x70>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	441a      	add	r2, r3
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <pvPortMalloc+0x70>)
 8000584:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8000586:	429a      	cmp	r2, r3
 8000588:	d90a      	bls.n	80005a0 <pvPortMalloc+0x58>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <pvPortMalloc+0x70>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <pvPortMalloc+0x74>)
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <pvPortMalloc+0x70>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <pvPortMalloc+0x70>)
 800059e:	6013      	str	r3, [r2, #0]
		}	
	}
	xTaskResumeAll();
 80005a0:	f000 fd36 	bl	8001010 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d101      	bne.n	80005ae <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80005aa:	f001 fdf9 	bl	80021a0 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20001c28 	.word	0x20001c28
 80005bc:	20000028 	.word	0x20000028

080005c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <xPortGetFreeHeapSize+0x18>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f5c3 53e0 	rsb	r3, r3, #7168	; 0x1c00
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20001c28 	.word	0x20001c28

080005f0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d104      	bne.n	800060a <xQueueGenericReset+0x1a>
 8000600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000604:	f380 8811 	msr	BASEPRI, r0
 8000608:	e7fe      	b.n	8000608 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800060a:	f7ff ff13 	bl	8000434 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800061a:	fb01 f303 	mul.w	r3, r1, r3
 800061e:	441a      	add	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063a:	3b01      	subs	r3, #1
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000640:	fb01 f303 	mul.w	r3, r1, r3
 8000644:	441a      	add	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f04f 32ff 	mov.w	r2, #4294967295
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10e      	bne.n	800067e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d014      	beq.n	8000692 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3310      	adds	r3, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fee7 	bl	8001440 <xTaskRemoveFromEventList>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10c      	bne.n	8000692 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8000678:	f7ff fece 	bl	8000418 <vPortYieldFromISR>
 800067c:	e009      	b.n	8000692 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3310      	adds	r3, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fda0 	bl	80001c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3324      	adds	r3, #36	; 0x24
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fd9b 	bl	80001c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000692:	f7ff fee1 	bl	8000458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	4613      	mov	r3, r2
 80006ac:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d026      	beq.n	8000706 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80006b8:	204c      	movs	r0, #76	; 0x4c
 80006ba:	f7ff ff45 	bl	8000548 <pvPortMalloc>
 80006be:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01f      	beq.n	8000706 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff38 	bl	8000548 <pvPortMalloc>
 80006d8:	4602      	mov	r2, r0
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00c      	beq.n	8000700 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 80006f2:	2101      	movs	r1, #1
 80006f4:	69b8      	ldr	r0, [r7, #24]
 80006f6:	f7ff ff7b 	bl	80005f0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	e002      	b.n	8000706 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000700:	69b8      	ldr	r0, [r7, #24]
 8000702:	f7ff ff5d 	bl	80005c0 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d104      	bne.n	8000716 <xQueueGenericCreate+0x76>
 800070c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000710:	f380 8811 	msr	BASEPRI, r0
 8000714:	e7fe      	b.n	8000714 <xQueueGenericCreate+0x74>

	return xReturn;
 8000716:	69fb      	ldr	r3, [r7, #28]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d104      	bne.n	8000742 <xQueueGenericSend+0x22>
 8000738:	f04f 0050 	mov.w	r0, #80	; 0x50
 800073c:	f380 8811 	msr	BASEPRI, r0
 8000740:	e7fe      	b.n	8000740 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <xQueueGenericSend+0x30>
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <xQueueGenericSend+0x34>
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <xQueueGenericSend+0x36>
 8000754:	2300      	movs	r3, #0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <xQueueGenericSend+0x44>
 800075a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800075e:	f380 8811 	msr	BASEPRI, r0
 8000762:	e7fe      	b.n	8000762 <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000764:	f7ff fe66 	bl	8000434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000770:	429a      	cmp	r2, r3
 8000772:	d216      	bcs.n	80007a2 <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f000 f996 	bl	8000aaa <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	2b00      	cmp	r3, #0
 8000784:	d009      	beq.n	800079a <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3324      	adds	r3, #36	; 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fe58 	bl	8001440 <xTaskRemoveFromEventList>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d101      	bne.n	800079a <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8000796:	f7ff fe3f 	bl	8000418 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 800079a:	f7ff fe5d 	bl	8000458 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800079e:	2301      	movs	r3, #1
 80007a0:	e056      	b.n	8000850 <xQueueGenericSend+0x130>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80007a8:	f7ff fe56 	bl	8000458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e04f      	b.n	8000850 <xQueueGenericSend+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d106      	bne.n	80007c4 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fe98 	bl	80014f0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80007c4:	f7ff fe48 	bl	8000458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80007c8:	f000 fc14 	bl	8000ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80007cc:	f7ff fe32 	bl	8000434 <vPortEnterCritical>
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d102      	bne.n	80007e0 <xQueueGenericSend+0xc0>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2200      	movs	r2, #0
 80007de:	645a      	str	r2, [r3, #68]	; 0x44
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e8:	d102      	bne.n	80007f0 <xQueueGenericSend+0xd0>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2200      	movs	r2, #0
 80007ee:	649a      	str	r2, [r3, #72]	; 0x48
 80007f0:	f7ff fe32 	bl	8000458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007f4:	1d3a      	adds	r2, r7, #4
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fe95 	bl	800152c <xTaskCheckForTimeOut>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d11d      	bne.n	8000844 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 fa30 	bl	8000c6e <prvIsQueueFull>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d011      	beq.n	8000838 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3310      	adds	r3, #16
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fdad 	bl	800137c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f9c2 	bl	8000bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000828:	f000 fbf2 	bl	8001010 <xTaskResumeAll>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d198      	bne.n	8000764 <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
 8000832:	f7ff fdf1 	bl	8000418 <vPortYieldFromISR>
 8000836:	e795      	b.n	8000764 <xQueueGenericSend+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f9b7 	bl	8000bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800083e:	f000 fbe7 	bl	8001010 <xTaskResumeAll>
 8000842:	e78f      	b.n	8000764 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f000 f9b1 	bl	8000bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800084a:	f000 fbe1 	bl	8001010 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800084e:	2300      	movs	r3, #0
		}
	}
}
 8000850:	4618      	mov	r0, r3
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d104      	bne.n	8000876 <xQueueGenericSendFromISR+0x1e>
 800086c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000870:	f380 8811 	msr	BASEPRI, r0
 8000874:	e7fe      	b.n	8000874 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d103      	bne.n	8000884 <xQueueGenericSendFromISR+0x2c>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <xQueueGenericSendFromISR+0x30>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <xQueueGenericSendFromISR+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <xQueueGenericSendFromISR+0x40>
 800088e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000892:	f380 8811 	msr	BASEPRI, r0
 8000896:	e7fe      	b.n	8000896 <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	f04f 0050 	mov.w	r0, #80	; 0x50
 80008a0:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d224      	bcs.n	80008fa <xQueueGenericSendFromISR+0xa2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f000 f8f8 	bl	8000aaa <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c2:	d112      	bne.n	80008ea <xQueueGenericSendFromISR+0x92>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d013      	beq.n	80008f4 <xQueueGenericSendFromISR+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3324      	adds	r3, #36	; 0x24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fdb5 	bl	8001440 <xTaskRemoveFromEventList>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00b      	beq.n	80008f4 <xQueueGenericSendFromISR+0x9c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <xQueueGenericSendFromISR+0x9c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e004      	b.n	80008f4 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e001      	b.n	80008fe <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8000906:	697b      	ldr	r3, [r7, #20]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <xQueueGenericReceive+0x22>
 8000928:	f04f 0050 	mov.w	r0, #80	; 0x50
 800092c:	f380 8811 	msr	BASEPRI, r0
 8000930:	e7fe      	b.n	8000930 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <xQueueGenericReceive+0x30>
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <xQueueGenericReceive+0x34>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <xQueueGenericReceive+0x36>
 8000944:	2300      	movs	r3, #0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d104      	bne.n	8000954 <xQueueGenericReceive+0x44>
 800094a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800094e:	f380 8811 	msr	BASEPRI, r0
 8000952:	e7fe      	b.n	8000952 <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000954:	f7ff fd6e 	bl	8000434 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095c:	2b00      	cmp	r3, #0
 800095e:	d03b      	beq.n	80009d8 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f000 f8f9 	bl	8000b60 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d11c      	bne.n	80009ae <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d104      	bne.n	8000990 <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8000986:	f000 ff6b 	bl	8001860 <xTaskGetCurrentTaskHandle>
 800098a:	4602      	mov	r2, r0
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d01b      	beq.n	80009d0 <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3310      	adds	r3, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fd4f 	bl	8001440 <xTaskRemoveFromEventList>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d113      	bne.n	80009d0 <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 80009a8:	f7ff fd36 	bl	8000418 <vPortYieldFromISR>
 80009ac:	e010      	b.n	80009d0 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d009      	beq.n	80009d0 <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3324      	adds	r3, #36	; 0x24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd3d 	bl	8001440 <xTaskRemoveFromEventList>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80009cc:	f7ff fd24 	bl	8000418 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 80009d0:	f7ff fd42 	bl	8000458 <vPortExitCritical>
				return pdPASS;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e064      	b.n	8000aa2 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80009de:	f7ff fd3b 	bl	8000458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e05d      	b.n	8000aa2 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fd7d 	bl	80014f0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80009fa:	f7ff fd2d 	bl	8000458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80009fe:	f000 faf9 	bl	8000ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a02:	f7ff fd17 	bl	8000434 <vPortEnterCritical>
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0e:	d102      	bne.n	8000a16 <xQueueGenericReceive+0x106>
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2200      	movs	r2, #0
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1e:	d102      	bne.n	8000a26 <xQueueGenericReceive+0x116>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2200      	movs	r2, #0
 8000a24:	649a      	str	r2, [r3, #72]	; 0x48
 8000a26:	f7ff fd17 	bl	8000458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a2a:	1d3a      	adds	r2, r7, #4
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fd7a 	bl	800152c <xTaskCheckForTimeOut>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d12b      	bne.n	8000a96 <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f900 	bl	8000c44 <prvIsQueueEmpty>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01f      	beq.n	8000a8a <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d108      	bne.n	8000a64 <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 8000a52:	f7ff fcef 	bl	8000434 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 ff2e 	bl	80018bc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8000a60:	f7ff fcfa 	bl	8000458 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3324      	adds	r3, #36	; 0x24
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fc85 	bl	800137c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f000 f89a 	bl	8000bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000a78:	f000 faca 	bl	8001010 <xTaskResumeAll>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f47f af68 	bne.w	8000954 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
 8000a84:	f7ff fcc8 	bl	8000418 <vPortYieldFromISR>
 8000a88:	e764      	b.n	8000954 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 f88e 	bl	8000bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000a90:	f000 fabe 	bl	8001010 <xTaskResumeAll>
 8000a94:	e75e      	b.n	8000954 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f888 	bl	8000bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000a9c:	f000 fab8 	bl	8001010 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8000aa0:	2300      	movs	r3, #0
		}
	}
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10c      	bne.n	8000ad8 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d143      	bne.n	8000b4e <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 ff50 	bl	8001970 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	e03a      	b.n	8000b4e <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d119      	bne.n	8000b12 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6898      	ldr	r0, [r3, #8]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	f001 fc9c 	bl	8002426 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	441a      	add	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d322      	bcc.n	8000b4e <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	e01d      	b.n	8000b4e <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	68d8      	ldr	r0, [r3, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	f001 fc82 	bl	8002426 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	441a      	add	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d207      	bcs.n	8000b4e <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	425b      	negs	r3, r3
 8000b48:	441a      	add	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d018      	beq.n	8000ba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	441a      	add	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d303      	bcc.n	8000b94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68d9      	ldr	r1, [r3, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	6838      	ldr	r0, [r7, #0]
 8000ba0:	f001 fc41 	bl	8002426 <memcpy>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000bb4:	f7ff fc3e 	bl	8000434 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000bb8:	e012      	b.n	8000be0 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d013      	beq.n	8000bea <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3324      	adds	r3, #36	; 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fc3a 	bl	8001440 <xTaskRemoveFromEventList>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8000bd2:	f000 fcff 	bl	80015d4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	dce8      	bgt.n	8000bba <prvUnlockQueue+0xe>
 8000be8:	e000      	b.n	8000bec <prvUnlockQueue+0x40>
			}
			else
			{
				break;
 8000bea:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000bf4:	f7ff fc30 	bl	8000458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000bf8:	f7ff fc1c 	bl	8000434 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000bfc:	e012      	b.n	8000c24 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d013      	beq.n	8000c2e <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3310      	adds	r3, #16
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fc18 	bl	8001440 <xTaskRemoveFromEventList>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8000c16:	f000 fcdd 	bl	80015d4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dce8      	bgt.n	8000bfe <prvUnlockQueue+0x52>
 8000c2c:	e000      	b.n	8000c30 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
 8000c2e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f04f 32ff 	mov.w	r2, #4294967295
 8000c36:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000c38:	f7ff fc0e 	bl	8000458 <vPortExitCritical>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8000c4c:	f7ff fbf2 	bl	8000434 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf0c      	ite	eq
 8000c58:	2301      	moveq	r3, #1
 8000c5a:	2300      	movne	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8000c60:	f7ff fbfa 	bl	8000458 <vPortExitCritical>

	return xReturn;
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8000c76:	f7ff fbdd 	bl	8000434 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	429a      	cmp	r2, r3
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8000c8e:	f7ff fbe3 	bl	8000458 <vPortExitCritical>

	return xReturn;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	e014      	b.n	8000cd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <vQueueAddToRegistry+0x4c>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10b      	bne.n	8000cd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000cb8:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <vQueueAddToRegistry+0x4c>)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <vQueueAddToRegistry+0x4c>)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	605a      	str	r2, [r3, #4]
				break;
 8000cce:	e005      	b.n	8000cdc <vQueueAddToRegistry+0x40>
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d9e7      	bls.n	8000cac <vQueueAddToRegistry+0x10>
			}
		}
	}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	20001d7c 	.word	0x20001d7c

08000cec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000cf6:	f7ff fb9d 	bl	8000434 <vPortEnterCritical>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d02:	d102      	bne.n	8000d0a <vQueueWaitForMessageRestricted+0x1e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	645a      	str	r2, [r3, #68]	; 0x44
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d12:	d102      	bne.n	8000d1a <vQueueWaitForMessageRestricted+0x2e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	649a      	str	r2, [r3, #72]	; 0x48
 8000d1a:	f7ff fb9d 	bl	8000458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3324      	adds	r3, #36	; 0x24
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb5d 	bl	80013ec <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff3a 	bl	8000bac <prvUnlockQueue>
	}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <xTaskGenericCreate+0x20>
 8000d56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d5a:	f380 8811 	msr	BASEPRI, r0
 8000d5e:	e7fe      	b.n	8000d5e <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d904      	bls.n	8000d70 <xTaskGenericCreate+0x30>
 8000d66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d6a:	f380 8811 	msr	BASEPRI, r0
 8000d6e:	e7fe      	b.n	8000d6e <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fd31 	bl	80017dc <prvAllocateTCBAndStack>
 8000d7a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d07a      	beq.n	8000e78 <xTaskGenericCreate+0x138>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f023 0307 	bic.w	r3, r3, #7
 8000d9a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <xTaskGenericCreate+0x70>
 8000da6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000daa:	f380 8811 	msr	BASEPRI, r0
 8000dae:	e7fe      	b.n	8000dae <xTaskGenericCreate+0x6e>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	69b8      	ldr	r0, [r7, #24]
 8000dbc:	f000 fc28 	bl	8001610 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	68f9      	ldr	r1, [r7, #12]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff fab5 	bl	8000334 <pxPortInitialiseStack>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8000dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8000ddc:	f7ff fb2a 	bl	8000434 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000de0:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <xTaskGenericCreate+0x168>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <xTaskGenericCreate+0x168>)
 8000de8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <xTaskGenericCreate+0x16c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d109      	bne.n	8000e06 <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000df2:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <xTaskGenericCreate+0x16c>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <xTaskGenericCreate+0x168>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10f      	bne.n	8000e20 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000e00:	f000 fc3c 	bl	800167c <prvInitialiseTaskLists>
 8000e04:	e00c      	b.n	8000e20 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <xTaskGenericCreate+0x170>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d108      	bne.n	8000e20 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <xTaskGenericCreate+0x16c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d802      	bhi.n	8000e20 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8000e1a:	4a24      	ldr	r2, [pc, #144]	; (8000eac <xTaskGenericCreate+0x16c>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <xTaskGenericCreate+0x174>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d903      	bls.n	8000e34 <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <xTaskGenericCreate+0x174>)
 8000e32:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <xTaskGenericCreate+0x178>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <xTaskGenericCreate+0x178>)
 8000e3c:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <xTaskGenericCreate+0x17c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d903      	bls.n	8000e52 <xTaskGenericCreate+0x112>
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <xTaskGenericCreate+0x17c>)
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <xTaskGenericCreate+0x180>)
 8000e60:	441a      	add	r2, r3
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	3304      	adds	r3, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f7ff f9da 	bl	8000222 <vListInsertEnd>

			xReturn = pdPASS;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000e72:	f7ff faf1 	bl	8000458 <vPortExitCritical>
 8000e76:	e002      	b.n	8000e7e <xTaskGenericCreate+0x13e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10b      	bne.n	8000e9c <xTaskGenericCreate+0x15c>
	{
		if( xSchedulerRunning != pdFALSE )
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <xTaskGenericCreate+0x170>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d007      	beq.n	8000e9c <xTaskGenericCreate+0x15c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <xTaskGenericCreate+0x16c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d201      	bcs.n	8000e9c <xTaskGenericCreate+0x15c>
			{
				portYIELD_WITHIN_API();
 8000e98:	f7ff fabe 	bl	8000418 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8000e9c:	69fb      	ldr	r3, [r7, #28]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001d04 	.word	0x20001d04
 8000eac:	20001c2c 	.word	0x20001c2c
 8000eb0:	20001d14 	.word	0x20001d14
 8000eb4:	20001d0c 	.word	0x20001d0c
 8000eb8:	20001d28 	.word	0x20001d28
 8000ebc:	20001d10 	.word	0x20001d10
 8000ec0:	20001c30 	.word	0x20001c30

08000ec4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <vTaskDelayUntil+0x1e>
 8000ed8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000edc:	f380 8811 	msr	BASEPRI, r0
 8000ee0:	e7fe      	b.n	8000ee0 <vTaskDelayUntil+0x1c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d104      	bne.n	8000ef2 <vTaskDelayUntil+0x2e>
 8000ee8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eec:	f380 8811 	msr	BASEPRI, r0
 8000ef0:	e7fe      	b.n	8000ef0 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8000ef2:	f000 f87f 	bl	8000ff4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <vTaskDelayUntil+0xb0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d90c      	bls.n	8000f26 <vTaskDelayUntil+0x62>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d913      	bls.n	8000f3e <vTaskDelayUntil+0x7a>
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <vTaskDelayUntil+0xb0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d90e      	bls.n	8000f3e <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00b      	b.n	8000f3e <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d804      	bhi.n	8000f3a <vTaskDelayUntil+0x76>
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <vTaskDelayUntil+0xb0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d901      	bls.n	8000f3e <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <vTaskDelayUntil+0xb4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f9c7 	bl	80002e4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000f56:	6938      	ldr	r0, [r7, #16]
 8000f58:	f000 fc0a 	bl	8001770 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8000f5c:	f000 f858 	bl	8001010 <xTaskResumeAll>
 8000f60:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
 8000f68:	f7ff fa56 	bl	8000418 <vPortYieldFromISR>
		}
	}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20001d08 	.word	0x20001d08
 8000f78:	20001c2c 	.word	0x20001c2c

08000f7c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000f82:	2300      	movs	r3, #0
 8000f84:	9303      	str	r3, [sp, #12]
 8000f86:	2300      	movs	r3, #0
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2246      	movs	r2, #70	; 0x46
 8000f96:	4913      	ldr	r1, [pc, #76]	; (8000fe4 <vTaskStartScheduler+0x68>)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <vTaskStartScheduler+0x6c>)
 8000f9a:	f7ff fed1 	bl	8000d40 <xTaskGenericCreate>
 8000f9e:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8000fa6:	f000 fd21 	bl	80019ec <xTimerCreateTimerTask>
 8000faa:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10b      	bne.n	8000fca <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8000fb2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fb6:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <vTaskStartScheduler+0x70>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <vTaskStartScheduler+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000fc6:	f7ff fa01 	bl	80003cc <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <vTaskStartScheduler+0x5e>
 8000fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fd4:	f380 8811 	msr	BASEPRI, r0
 8000fd8:	e7fe      	b.n	8000fd8 <vTaskStartScheduler+0x5c>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08002478 	.word	0x08002478
 8000fe8:	080015ed 	.word	0x080015ed
 8000fec:	20001d14 	.word	0x20001d14
 8000ff0:	20001d08 	.word	0x20001d08

08000ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <vTaskSuspendAll+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a03      	ldr	r2, [pc, #12]	; (800100c <vTaskSuspendAll+0x18>)
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20001d18 	.word	0x20001d18

08001010 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <xTaskResumeAll+0xe8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d104      	bne.n	800102c <xTaskResumeAll+0x1c>
 8001022:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001026:	f380 8811 	msr	BASEPRI, r0
 800102a:	e7fe      	b.n	800102a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800102c:	f7ff fa02 	bl	8000434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <xTaskResumeAll+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <xTaskResumeAll+0xe8>)
 8001038:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <xTaskResumeAll+0xe8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d152      	bne.n	80010e8 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <xTaskResumeAll+0xec>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d04e      	beq.n	80010e8 <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 800104e:	e027      	b.n	80010a0 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <xTaskResumeAll+0xf0>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8001056:	f104 0318 	add.w	r3, r4, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f942 	bl	80002e4 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001060:	1d23      	adds	r3, r4, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f93e 	bl	80002e4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8001068:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <xTaskResumeAll+0xf4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d902      	bls.n	8001078 <xTaskResumeAll+0x68>
 8001072:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <xTaskResumeAll+0xf4>)
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <xTaskResumeAll+0xf8>)
 8001084:	4413      	add	r3, r2
 8001086:	1d22      	adds	r2, r4, #4
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f8c9 	bl	8000222 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <xTaskResumeAll+0xfc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	429a      	cmp	r2, r3
 800109a:	d301      	bcc.n	80010a0 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 800109c:	2301      	movs	r3, #1
 800109e:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <xTaskResumeAll+0xf0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1d3      	bne.n	8001050 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <xTaskResumeAll+0x100>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00d      	beq.n	80010cc <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80010b0:	e006      	b.n	80010c0 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 80010b2:	f000 f843 	bl	800113c <vTaskIncrementTick>
						--uxMissedTicks;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <xTaskResumeAll+0x100>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <xTaskResumeAll+0x100>)
 80010be:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <xTaskResumeAll+0x100>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f4      	bne.n	80010b2 <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d003      	beq.n	80010da <xTaskResumeAll+0xca>
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <xTaskResumeAll+0x104>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d106      	bne.n	80010e8 <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 80010da:	2301      	movs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <xTaskResumeAll+0x104>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 80010e4:	f7ff f998 	bl	8000418 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80010e8:	f7ff f9b6 	bl	8000458 <vPortExitCritical>

	return xAlreadyYielded;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20001d18 	.word	0x20001d18
 80010fc:	20001d04 	.word	0x20001d04
 8001100:	20001cc4 	.word	0x20001cc4
 8001104:	20001d10 	.word	0x20001d10
 8001108:	20001c30 	.word	0x20001c30
 800110c:	20001c2c 	.word	0x20001c2c
 8001110:	20001d1c 	.word	0x20001d1c
 8001114:	20001d20 	.word	0x20001d20

08001118 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800111e:	f7ff f989 	bl	8000434 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <xTaskGetTickCount+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001128:	f7ff f996 	bl	8000458 <vPortExitCritical>

	return xTicks;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20001d08 	.word	0x20001d08

0800113c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <vTaskIncrementTick+0x12c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d17c      	bne.n	8001244 <vTaskIncrementTick+0x108>
	{
		++xTickCount;
 800114a:	4b48      	ldr	r3, [pc, #288]	; (800126c <vTaskIncrementTick+0x130>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a46      	ldr	r2, [pc, #280]	; (800126c <vTaskIncrementTick+0x130>)
 8001152:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <vTaskIncrementTick+0x130>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d12b      	bne.n	80011b4 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <vTaskIncrementTick+0x134>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <vTaskIncrementTick+0x34>
 8001166:	f04f 0050 	mov.w	r0, #80	; 0x50
 800116a:	f380 8811 	msr	BASEPRI, r0
 800116e:	e7fe      	b.n	800116e <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 8001170:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <vTaskIncrementTick+0x134>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <vTaskIncrementTick+0x138>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <vTaskIncrementTick+0x134>)
 800117c:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
 800117e:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <vTaskIncrementTick+0x138>)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <vTaskIncrementTick+0x13c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a3b      	ldr	r2, [pc, #236]	; (8001278 <vTaskIncrementTick+0x13c>)
 800118c:	6013      	str	r3, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <vTaskIncrementTick+0x134>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d104      	bne.n	80011a2 <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <vTaskIncrementTick+0x140>)
 800119a:	f04f 32ff 	mov.w	r2, #4294967295
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e008      	b.n	80011b4 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <vTaskIncrementTick+0x134>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <vTaskIncrementTick+0x140>)
 80011b2:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <vTaskIncrementTick+0x130>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <vTaskIncrementTick+0x140>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d348      	bcc.n	8001252 <vTaskIncrementTick+0x116>
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <vTaskIncrementTick+0x134>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <vTaskIncrementTick+0x98>
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <vTaskIncrementTick+0x140>)
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e03e      	b.n	8001252 <vTaskIncrementTick+0x116>
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <vTaskIncrementTick+0x134>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <vTaskIncrementTick+0x130>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d203      	bcs.n	80011f6 <vTaskIncrementTick+0xba>
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <vTaskIncrementTick+0x140>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02d      	b.n	8001252 <vTaskIncrementTick+0x116>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3304      	adds	r3, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f872 	bl	80002e4 <vListRemove>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <vTaskIncrementTick+0xd6>
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3318      	adds	r3, #24
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f869 	bl	80002e4 <vListRemove>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <vTaskIncrementTick+0x144>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d903      	bls.n	8001226 <vTaskIncrementTick+0xea>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <vTaskIncrementTick+0x144>)
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <vTaskIncrementTick+0x148>)
 8001234:	441a      	add	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3304      	adds	r3, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f7fe fff0 	bl	8000222 <vListInsertEnd>
 8001242:	e7bd      	b.n	80011c0 <vTaskIncrementTick+0x84>
	}
	else
	{
		++uxMissedTicks;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <vTaskIncrementTick+0x14c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <vTaskIncrementTick+0x14c>)
 800124c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800124e:	f000 ff85 	bl	800215c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <vTaskIncrementTick+0x14c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <vTaskIncrementTick+0x122>
		{
			vApplicationTickHook();
 800125a:	f000 ff7f 	bl	800215c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001d18 	.word	0x20001d18
 800126c:	20001d08 	.word	0x20001d08
 8001270:	20001cbc 	.word	0x20001cbc
 8001274:	20001cc0 	.word	0x20001cc0
 8001278:	20001d24 	.word	0x20001d24
 800127c:	20000004 	.word	0x20000004
 8001280:	20001d10 	.word	0x20001d10
 8001284:	20001c30 	.word	0x20001c30
 8001288:	20001d1c 	.word	0x20001d1c

0800128c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <vTaskSwitchContext+0xd8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <vTaskSwitchContext+0xdc>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
 80012a0:	e05c      	b.n	800135c <vTaskSwitchContext+0xd0>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <vTaskSwitchContext+0xe0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <vTaskSwitchContext+0xe0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d808      	bhi.n	80012c4 <vTaskSwitchContext+0x38>
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <vTaskSwitchContext+0xe0>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <vTaskSwitchContext+0xe0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3334      	adds	r3, #52	; 0x34
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f000 ff71 	bl	80021a6 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <vTaskSwitchContext+0xe0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	2214      	movs	r2, #20
 80012cc:	4928      	ldr	r1, [pc, #160]	; (8001370 <vTaskSwitchContext+0xe4>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f89a 	bl	8002408 <memcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d017      	beq.n	800130a <vTaskSwitchContext+0x7e>
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <vTaskSwitchContext+0xe0>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <vTaskSwitchContext+0xe0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3334      	adds	r3, #52	; 0x34
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f000 ff5d 	bl	80021a6 <vApplicationStackOverflowHook>
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80012ec:	e00d      	b.n	800130a <vTaskSwitchContext+0x7e>
			configASSERT( uxTopReadyPriority );
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <vTaskSwitchContext+0xe8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <vTaskSwitchContext+0x74>
 80012f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012fa:	f380 8811 	msr	BASEPRI, r0
 80012fe:	e7fe      	b.n	80012fe <vTaskSwitchContext+0x72>
			--uxTopReadyPriority;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <vTaskSwitchContext+0xe8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <vTaskSwitchContext+0xe8>)
 8001308:	6013      	str	r3, [r2, #0]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <vTaskSwitchContext+0xe8>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	491a      	ldr	r1, [pc, #104]	; (8001378 <vTaskSwitchContext+0xec>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0e6      	beq.n	80012ee <vTaskSwitchContext+0x62>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <vTaskSwitchContext+0xe8>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <vTaskSwitchContext+0xec>)
 800132e:	4413      	add	r3, r2
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3308      	adds	r3, #8
 8001344:	429a      	cmp	r2, r3
 8001346:	d104      	bne.n	8001352 <vTaskSwitchContext+0xc6>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <vTaskSwitchContext+0xe0>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20001d18 	.word	0x20001d18
 8001368:	20001d20 	.word	0x20001d20
 800136c:	20001c2c 	.word	0x20001c2c
 8001370:	080024bc 	.word	0x080024bc
 8001374:	20001d10 	.word	0x20001d10
 8001378:	20001c30 	.word	0x20001c30

0800137c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d104      	bne.n	8001396 <vTaskPlaceOnEventList+0x1a>
 800138c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001390:	f380 8811 	msr	BASEPRI, r0
 8001394:	e7fe      	b.n	8001394 <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <vTaskPlaceOnEventList+0x64>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3318      	adds	r3, #24
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7fe ff67 	bl	8000272 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <vTaskPlaceOnEventList+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3304      	adds	r3, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff9a 	bl	80002e4 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b6:	d107      	bne.n	80013c8 <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <vTaskPlaceOnEventList+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3304      	adds	r3, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <vTaskPlaceOnEventList+0x68>)
 80013c2:	f7fe ff2e 	bl	8000222 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 80013c6:	e007      	b.n	80013d8 <vTaskPlaceOnEventList+0x5c>
			xTimeToWake = xTickCount + xTicksToWait;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <vTaskPlaceOnEventList+0x6c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f9cc 	bl	8001770 <prvAddCurrentTaskToDelayedList>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20001c2c 	.word	0x20001c2c
 80013e4:	20001cf0 	.word	0x20001cf0
 80013e8:	20001d08 	.word	0x20001d08

080013ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <vTaskPlaceOnEventListRestricted+0x1a>
 80013fc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001400:	f380 8811 	msr	BASEPRI, r0
 8001404:	e7fe      	b.n	8001404 <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3318      	adds	r3, #24
 800140c:	4619      	mov	r1, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7fe ff07 	bl	8000222 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3304      	adds	r3, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ff62 	bl	80002e4 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <vTaskPlaceOnEventListRestricted+0x50>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f9a0 	bl	8001770 <prvAddCurrentTaskToDelayedList>
	}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20001c2c 	.word	0x20001c2c
 800143c:	20001d08 	.word	0x20001d08

08001440 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d104      	bne.n	8001460 <xTaskRemoveFromEventList+0x20>
 8001456:	f04f 0050 	mov.w	r0, #80	; 0x50
 800145a:	f380 8811 	msr	BASEPRI, r0
 800145e:	e7fe      	b.n	800145e <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3318      	adds	r3, #24
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ff3d 	bl	80002e4 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <xTaskRemoveFromEventList+0x9c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d11d      	bne.n	80014ae <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3304      	adds	r3, #4
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ff34 	bl	80002e4 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <xTaskRemoveFromEventList+0xa0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d903      	bls.n	8001490 <xTaskRemoveFromEventList+0x50>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <xTaskRemoveFromEventList+0xa0>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <xTaskRemoveFromEventList+0xa4>)
 800149e:	441a      	add	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3304      	adds	r3, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4610      	mov	r0, r2
 80014a8:	f7fe febb 	bl	8000222 <vListInsertEnd>
 80014ac:	e005      	b.n	80014ba <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3318      	adds	r3, #24
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <xTaskRemoveFromEventList+0xa8>)
 80014b6:	f7fe feb4 	bl	8000222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <xTaskRemoveFromEventList+0xac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d302      	bcc.n	80014ce <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e001      	b.n	80014d2 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20001d18 	.word	0x20001d18
 80014e0:	20001d10 	.word	0x20001d10
 80014e4:	20001c30 	.word	0x20001c30
 80014e8:	20001cc4 	.word	0x20001cc4
 80014ec:	20001c2c 	.word	0x20001c2c

080014f0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d104      	bne.n	8001508 <vTaskSetTimeOutState+0x18>
 80014fe:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001502:	f380 8811 	msr	BASEPRI, r0
 8001506:	e7fe      	b.n	8001506 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <vTaskSetTimeOutState+0x34>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <vTaskSetTimeOutState+0x38>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20001d24 	.word	0x20001d24
 8001528:	20001d08 	.word	0x20001d08

0800152c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d104      	bne.n	8001546 <xTaskCheckForTimeOut+0x1a>
 800153c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001540:	f380 8811 	msr	BASEPRI, r0
 8001544:	e7fe      	b.n	8001544 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <xTaskCheckForTimeOut+0x2a>
 800154c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001550:	f380 8811 	msr	BASEPRI, r0
 8001554:	e7fe      	b.n	8001554 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 8001556:	f7fe ff6d 	bl	8000434 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001562:	d102      	bne.n	800156a <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e029      	b.n	80015be <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <xTaskCheckForTimeOut+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d008      	beq.n	8001588 <xTaskCheckForTimeOut+0x5c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <xTaskCheckForTimeOut+0xa4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d802      	bhi.n	8001588 <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001582:	2301      	movs	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e01a      	b.n	80015be <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <xTaskCheckForTimeOut+0xa4>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	1ad2      	subs	r2, r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d20f      	bcs.n	80015ba <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <xTaskCheckForTimeOut+0xa4>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff9e 	bl	80014f0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e001      	b.n	80015be <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015be:	f7fe ff4b 	bl	8000458 <vPortExitCritical>

	return xReturn;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20001d24 	.word	0x20001d24
 80015d0:	20001d08 	.word	0x20001d08

080015d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <vTaskMissedYield+0x14>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20001d20 	.word	0x20001d20

080015ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80015f4:	f000 f882 	bl	80016fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <prvIdleTask+0x20>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d901      	bls.n	8001604 <prvIdleTask+0x18>
			{
				taskYIELD();
 8001600:	f7fe ff0a 	bl	8000418 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001604:	f000 fdd5 	bl	80021b2 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001608:	e7f4      	b.n	80015f4 <prvIdleTask+0x8>
 800160a:	bf00      	nop
 800160c:	20001c30 	.word	0x20001c30

08001610 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3334      	adds	r3, #52	; 0x34
 8001622:	220a      	movs	r2, #10
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ff10 	bl	800244c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d901      	bls.n	800163e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800163a:	2304      	movs	r3, #4
 800163c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdda 	bl	8000208 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3318      	adds	r3, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe fdd5 	bl	8000208 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f1c3 0205 	rsb	r2, r3, #5
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	e00c      	b.n	80016a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <prvInitialiseTaskLists+0x60>)
 8001694:	4413      	add	r3, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fd96 	bl	80001c8 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3301      	adds	r3, #1
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d9ef      	bls.n	8001688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <prvInitialiseTaskLists+0x64>)
 80016aa:	f7fe fd8d 	bl	80001c8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <prvInitialiseTaskLists+0x68>)
 80016b0:	f7fe fd8a 	bl	80001c8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <prvInitialiseTaskLists+0x6c>)
 80016b6:	f7fe fd87 	bl	80001c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <prvInitialiseTaskLists+0x70>)
 80016bc:	f7fe fd84 	bl	80001c8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <prvInitialiseTaskLists+0x74>)
 80016c2:	f7fe fd81 	bl	80001c8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <prvInitialiseTaskLists+0x78>)
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <prvInitialiseTaskLists+0x64>)
 80016ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <prvInitialiseTaskLists+0x7c>)
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <prvInitialiseTaskLists+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20001c30 	.word	0x20001c30
 80016e0:	20001c94 	.word	0x20001c94
 80016e4:	20001ca8 	.word	0x20001ca8
 80016e8:	20001cc4 	.word	0x20001cc4
 80016ec:	20001cd8 	.word	0x20001cd8
 80016f0:	20001cf0 	.word	0x20001cf0
 80016f4:	20001cbc 	.word	0x20001cbc
 80016f8:	20001cc0 	.word	0x20001cc0

080016fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <prvCheckTasksWaitingTermination+0x68>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d028      	beq.n	800175c <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 800170a:	f7ff fc73 	bl	8000ff4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <prvCheckTasksWaitingTermination+0x6c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 800171e:	f7ff fc77 	bl	8001010 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d119      	bne.n	800175c <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001728:	f7fe fe84 	bl	8000434 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <prvCheckTasksWaitingTermination+0x6c>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3304      	adds	r3, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdd3 	bl	80002e4 <vListRemove>
					--uxCurrentNumberOfTasks;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <prvCheckTasksWaitingTermination+0x70>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	4a09      	ldr	r2, [pc, #36]	; (800176c <prvCheckTasksWaitingTermination+0x70>)
 8001746:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <prvCheckTasksWaitingTermination+0x68>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <prvCheckTasksWaitingTermination+0x68>)
 8001750:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001752:	f7fe fe81 	bl	8000458 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f000 f871 	bl	800183e <prvDeleteTCB>
			}
		}
	}
	#endif
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20001cec 	.word	0x20001cec
 8001768:	20001cd8 	.word	0x20001cd8
 800176c:	20001d04 	.word	0x20001d04

08001770 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <prvAddCurrentTaskToDelayedList+0x58>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <prvAddCurrentTaskToDelayedList+0x5c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d209      	bcs.n	800179e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <prvAddCurrentTaskToDelayedList+0x60>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <prvAddCurrentTaskToDelayedList+0x58>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3304      	adds	r3, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7fe fd6b 	bl	8000272 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 800179c:	e010      	b.n	80017c0 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <prvAddCurrentTaskToDelayedList+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <prvAddCurrentTaskToDelayedList+0x58>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3304      	adds	r3, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f7fe fd61 	bl	8000272 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <prvAddCurrentTaskToDelayedList+0x68>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d202      	bcs.n	80017c0 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <prvAddCurrentTaskToDelayedList+0x68>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20001c2c 	.word	0x20001c2c
 80017cc:	20001d08 	.word	0x20001d08
 80017d0:	20001cc0 	.word	0x20001cc0
 80017d4:	20001cbc 	.word	0x20001cbc
 80017d8:	20000004 	.word	0x20000004

080017dc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80017e8:	2044      	movs	r0, #68	; 0x44
 80017ea:	f7fe fead 	bl	8000548 <pvPortMalloc>
 80017ee:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01e      	beq.n	8001834 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d106      	bne.n	800180a <prvAllocateTCBAndStack+0x2e>
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fea1 	bl	8000548 <pvPortMalloc>
 8001806:	4603      	mov	r3, r0
 8001808:	e000      	b.n	800180c <prvAllocateTCBAndStack+0x30>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7fe fed1 	bl	80005c0 <vPortFree>
			pxNewTCB = NULL;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e007      	b.n	8001834 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	461a      	mov	r2, r3
 800182e:	21a5      	movs	r1, #165	; 0xa5
 8001830:	f000 fe04 	bl	800243c <memset>
		}
	}

	return pxNewTCB;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe feb8 	bl	80005c0 <vPortFree>
		vPortFree( pxTCB );
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7fe feb5 	bl	80005c0 <vPortFree>
	}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <xTaskGetCurrentTaskHandle+0x1c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800186c:	687b      	ldr	r3, [r7, #4]
	}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20001c2c 	.word	0x20001c2c

08001880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <xTaskGetSchedulerState+0x34>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	e008      	b.n	80018a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <xTaskGetSchedulerState+0x38>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800189c:	2301      	movs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	e001      	b.n	80018a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80018a2:	2302      	movs	r3, #2
 80018a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80018a6:	687b      	ldr	r3, [r7, #4]
	}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20001d14 	.word	0x20001d14
 80018b8:	20001d18 	.word	0x20001d18

080018bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d104      	bne.n	80018d8 <vTaskPriorityInherit+0x1c>
 80018ce:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018d2:	f380 8811 	msr	BASEPRI, r0
 80018d6:	e7fe      	b.n	80018d6 <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <vTaskPriorityInherit+0xa8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d23a      	bcs.n	800195c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <vTaskPriorityInherit+0xa8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	f1c3 0205 	rsb	r2, r3, #5
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6959      	ldr	r1, [r3, #20]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <vTaskPriorityInherit+0xac>)
 8001906:	4413      	add	r3, r2
 8001908:	4299      	cmp	r1, r3
 800190a:	d122      	bne.n	8001952 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3304      	adds	r3, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fce7 	bl	80002e4 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <vTaskPriorityInherit+0xa8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <vTaskPriorityInherit+0xb0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d903      	bls.n	8001934 <vTaskPriorityInherit+0x78>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <vTaskPriorityInherit+0xb0>)
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4a09      	ldr	r2, [pc, #36]	; (8001968 <vTaskPriorityInherit+0xac>)
 8001942:	441a      	add	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3304      	adds	r3, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f7fe fc69 	bl	8000222 <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001950:	e004      	b.n	800195c <vTaskPriorityInherit+0xa0>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <vTaskPriorityInherit+0xa8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20001c2c 	.word	0x20001c2c
 8001968:	20001c30 	.word	0x20001c30
 800196c:	20001d10 	.word	0x20001d10

08001970 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02c      	beq.n	80019dc <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	429a      	cmp	r2, r3
 800198c:	d026      	beq.n	80019dc <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fca6 	bl	80002e4 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f1c3 0205 	rsb	r2, r3, #5
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <vTaskPriorityDisinherit+0x74>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d903      	bls.n	80019c0 <vTaskPriorityDisinherit+0x50>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <vTaskPriorityDisinherit+0x74>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <vTaskPriorityDisinherit+0x78>)
 80019ce:	441a      	add	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3304      	adds	r3, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7fe fc23 	bl	8000222 <vListInsertEnd>
			}
		}
	}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20001d10 	.word	0x20001d10
 80019e8:	20001c30 	.word	0x20001c30

080019ec <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80019f6:	f000 fa7d 	bl	8001ef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <xTimerCreateTimerTask+0x50>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00e      	beq.n	8001a20 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8001a02:	2300      	movs	r3, #0
 8001a04:	9303      	str	r3, [sp, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2303      	movs	r3, #3
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	2246      	movs	r2, #70	; 0x46
 8001a16:	490a      	ldr	r1, [pc, #40]	; (8001a40 <xTimerCreateTimerTask+0x54>)
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <xTimerCreateTimerTask+0x58>)
 8001a1a:	f7ff f991 	bl	8000d40 <xTaskGenericCreate>
 8001a1e:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <xTimerCreateTimerTask+0x44>
 8001a26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a2a:	f380 8811 	msr	BASEPRI, r0
 8001a2e:	e7fe      	b.n	8001a2e <xTimerCreateTimerTask+0x42>
	return xReturn;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20001d5c 	.word	0x20001d5c
 8001a40:	08002480 	.word	0x08002480
 8001a44:	08001ba9 	.word	0x08001ba9

08001a48 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <xTimerCreate+0x28>
	{
		pxNewTimer = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d121      	bne.n	8001aaa <xTimerCreate+0x62>
 8001a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a6a:	f380 8811 	msr	BASEPRI, r0
 8001a6e:	e7fe      	b.n	8001a6e <xTimerCreate+0x26>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 8001a70:	2028      	movs	r0, #40	; 0x28
 8001a72:	f7fe fd69 	bl	8000548 <pvPortMalloc>
 8001a76:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <xTimerCreate+0x62>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8001a7e:	f000 fa39 	bl	8001ef4 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	6a3a      	ldr	r2, [r7, #32]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fbaf 	bl	8000208 <vListInitialiseItem>
		{
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
 8001aaa:	697b      	ldr	r3, [r7, #20]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <xTimerGenericCommand+0x7c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d02a      	beq.n	8001b24 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d118      	bne.n	8001b12 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001ae0:	f7ff fece 	bl	8001880 <xTaskGetSchedulerState>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d109      	bne.n	8001afe <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <xTimerGenericCommand+0x7c>)
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	f107 0110 	add.w	r1, r7, #16
 8001af2:	2300      	movs	r3, #0
 8001af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af6:	f7fe fe13 	bl	8000720 <xQueueGenericSend>
 8001afa:	61f8      	str	r0, [r7, #28]
 8001afc:	e012      	b.n	8001b24 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <xTimerGenericCommand+0x7c>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f107 0110 	add.w	r1, r7, #16
 8001b06:	2300      	movs	r3, #0
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f7fe fe09 	bl	8000720 <xQueueGenericSend>
 8001b0e:	61f8      	str	r0, [r7, #28]
 8001b10:	e008      	b.n	8001b24 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <xTimerGenericCommand+0x7c>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f107 0110 	add.w	r1, r7, #16
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	f7fe fe9b 	bl	8000858 <xQueueGenericSendFromISR>
 8001b22:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8001b24:	69fb      	ldr	r3, [r7, #28]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20001d5c 	.word	0x20001d5c

08001b34 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <prvProcessExpiredTimer+0x70>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fbc9 	bl	80002e4 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d11c      	bne.n	8001b94 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	18d1      	adds	r1, r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f8ac 	bl	8001cc4 <prvInsertTimerInActiveList>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d110      	bne.n	8001b94 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff ff99 	bl	8001ab4 <xTimerGenericCommand>
 8001b82:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <prvProcessExpiredTimer+0x60>
 8001b8a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b8e:	f380 8811 	msr	BASEPRI, r0
 8001b92:	e7fe      	b.n	8001b92 <prvProcessExpiredTimer+0x5e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	4798      	blx	r3
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20001d54 	.word	0x20001d54

08001ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f83f 	bl	8001c38 <prvGetNextExpireTime>
 8001bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f803 	bl	8001bcc <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8001bc6:	f000 f8bf 	bl	8001d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bca:	e7f1      	b.n	8001bb0 <prvTimerTask+0x8>

08001bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001bd6:	f7ff fa0d 	bl	8000ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f84e 	bl	8001c80 <prvSampleTimeNow>
 8001be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d11d      	bne.n	8001c28 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <prvProcessTimerOrBlockTask+0x3c>
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d806      	bhi.n	8001c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 8001bfa:	f7ff fa09 	bl	8001010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff97 	bl	8001b34 <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8001c06:	e011      	b.n	8001c2c <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <prvProcessTimerOrBlockTask+0x68>)
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7ff f86a 	bl	8000cec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001c18:	f7ff f9fa 	bl	8001010 <xTaskResumeAll>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
 8001c22:	f7fe fbf9 	bl	8000418 <vPortYieldFromISR>
}
 8001c26:	e001      	b.n	8001c2c <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
 8001c28:	f7ff f9f2 	bl	8001010 <xTaskResumeAll>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20001d5c 	.word	0x20001d5c

08001c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <prvGetNextExpireTime+0x44>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <prvGetNextExpireTime+0x44>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e001      	b.n	8001c6e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20001d54 	.word	0x20001d54

08001c80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8001c88:	f7ff fa46 	bl	8001118 <xTaskGetTickCount>
 8001c8c:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <prvSampleTimeNow+0x40>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <prvSampleTimeNow+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f8cd 	bl	8001e3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e002      	b.n	8001cb0 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <prvSampleTimeNow+0x40>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6013      	str	r3, [r2, #0]
	
	return xTimeNow;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20001d60 	.word	0x20001d60

08001cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d812      	bhi.n	8001d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d302      	bcc.n	8001cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e01b      	b.n	8001d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <prvInsertTimerInActiveList+0x7c>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f7fe fab2 	bl	8000272 <vListInsert>
 8001d0e:	e012      	b.n	8001d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d206      	bcs.n	8001d26 <prvInsertTimerInActiveList+0x62>
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d302      	bcc.n	8001d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	e007      	b.n	8001d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <prvInsertTimerInActiveList+0x80>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4610      	mov	r0, r2
 8001d32:	f7fe fa9e 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001d36:	697b      	ldr	r3, [r7, #20]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20001d58 	.word	0x20001d58
 8001d44:	20001d54 	.word	0x20001d54

08001d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff95 	bl	8001c80 <prvSampleTimeNow>
 8001d56:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001d58:	e05f      	b.n	8001e1a <prvProcessReceivedCommands+0xd2>
	{
		pxTimer = xMessage.pxTimer;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fab7 	bl	80002e4 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d84d      	bhi.n	8001e18 <prvProcessReceivedCommands+0xd0>
 8001d7c:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <prvProcessReceivedCommands+0x3c>)
 8001d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001e1b 	.word	0x08001e1b
 8001d8c:	08001de5 	.word	0x08001de5
 8001d90:	08001e11 	.word	0x08001e11
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	18d1      	adds	r1, r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	69b8      	ldr	r0, [r7, #24]
 8001da2:	f7ff ff8f 	bl	8001cc4 <prvInsertTimerInActiveList>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d136      	bne.n	8001e1a <prvProcessReceivedCommands+0xd2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	69b8      	ldr	r0, [r7, #24]
 8001db2:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d12e      	bne.n	8001e1a <prvProcessReceivedCommands+0xd2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	69b8      	ldr	r0, [r7, #24]
 8001dce:	f7ff fe71 	bl	8001ab4 <xTimerGenericCommand>
 8001dd2:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11f      	bne.n	8001e1a <prvProcessReceivedCommands+0xd2>
 8001dda:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001dde:	f380 8811 	msr	BASEPRI, r0
 8001de2:	e7fe      	b.n	8001de2 <prvProcessReceivedCommands+0x9a>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <prvProcessReceivedCommands+0xb4>
 8001df2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001df6:	f380 8811 	msr	BASEPRI, r0
 8001dfa:	e7fe      	b.n	8001dfa <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	18d1      	adds	r1, r2, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	69b8      	ldr	r0, [r7, #24]
 8001e0a:	f7ff ff5b 	bl	8001cc4 <prvInsertTimerInActiveList>
				break;
 8001e0e:	e004      	b.n	8001e1a <prvProcessReceivedCommands+0xd2>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8001e10:	69b8      	ldr	r0, [r7, #24]
 8001e12:	f7fe fbd5 	bl	80005c0 <vPortFree>
				break;
 8001e16:	e000      	b.n	8001e1a <prvProcessReceivedCommands+0xd2>

			default	:			
				/* Don't expect to get here. */
				break;
 8001e18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <prvProcessReceivedCommands+0xf0>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f107 0108 	add.w	r1, r7, #8
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	f7fe fd73 	bl	8000910 <xQueueGenericReceive>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d194      	bne.n	8001d5a <prvProcessReceivedCommands+0x12>
		}
	}
}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20001d5c 	.word	0x20001d5c

08001e3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e44:	e03f      	b.n	8001ec6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <prvSwitchTimerLists+0xb0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <prvSwitchTimerLists+0xb0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fa40 	bl	80002e4 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	69b8      	ldr	r0, [r7, #24]
 8001e6a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d128      	bne.n	8001ec6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d90e      	bls.n	8001ea4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <prvSwitchTimerLists+0xb0>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f7fe f9e8 	bl	8000272 <vListInsert>
 8001ea2:	e010      	b.n	8001ec6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	2100      	movs	r1, #0
 8001eae:	69b8      	ldr	r0, [r7, #24]
 8001eb0:	f7ff fe00 	bl	8001ab4 <xTimerGenericCommand>
 8001eb4:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <prvSwitchTimerLists+0x8a>
 8001ebc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ec0:	f380 8811 	msr	BASEPRI, r0
 8001ec4:	e7fe      	b.n	8001ec4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <prvSwitchTimerLists+0xb0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ba      	bne.n	8001e46 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <prvSwitchTimerLists+0xb0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <prvSwitchTimerLists+0xb4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <prvSwitchTimerLists+0xb0>)
 8001edc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <prvSwitchTimerLists+0xb4>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20001d54 	.word	0x20001d54
 8001ef0:	20001d58 	.word	0x20001d58

08001ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8001ef8:	f7fe fa9c 	bl	8000434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <prvCheckForValidListAndQueue+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d113      	bne.n	8001f2c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <prvCheckForValidListAndQueue+0x44>)
 8001f06:	f7fe f95f 	bl	80001c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8001f0a:	480c      	ldr	r0, [pc, #48]	; (8001f3c <prvCheckForValidListAndQueue+0x48>)
 8001f0c:	f7fe f95c 	bl	80001c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <prvCheckForValidListAndQueue+0x4c>)
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <prvCheckForValidListAndQueue+0x44>)
 8001f14:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <prvCheckForValidListAndQueue+0x50>)
 8001f18:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <prvCheckForValidListAndQueue+0x48>)
 8001f1a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	210c      	movs	r1, #12
 8001f20:	2005      	movs	r0, #5
 8001f22:	f7fe fbbd 	bl	80006a0 <xQueueGenericCreate>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <prvCheckForValidListAndQueue+0x40>)
 8001f2a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8001f2c:	f7fe fa94 	bl	8000458 <vPortExitCritical>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20001d5c 	.word	0x20001d5c
 8001f38:	20001d2c 	.word	0x20001d2c
 8001f3c:	20001d40 	.word	0x20001d40
 8001f40:	20001d54 	.word	0x20001d54
 8001f44:	20001d58 	.word	0x20001d58

08001f48 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <main>:
static volatile uint32_t ulCountOfReceivedSemaphores = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af04      	add	r7, sp, #16
xTimerHandle xExampleSoftwareTimer = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8001f9a:	f000 f916 	bl	80021ca <prvSetupHardware>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7fe fb7c 	bl	80006a0 <xQueueGenericCreate>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <main+0xe0>)
 8001fac:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, ( signed char * ) "MainQueue" );
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <main+0xe0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4930      	ldr	r1, [pc, #192]	; (8002074 <main+0xe4>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fe71 	bl	8000c9c <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 8001fba:	2203      	movs	r2, #3
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7fe fb6e 	bl	80006a0 <xQueueGenericCreate>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <main+0xe8>)
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <main+0xe8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <main+0x50>
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <main+0xe8>)
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	f7fe fba0 	bl	8000720 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, ( signed char * ) "xEventSemaphore" );
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <main+0xe8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4925      	ldr	r1, [pc, #148]	; (800207c <main+0xec>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fe58 	bl	8000c9c <vQueueAddToRegistry>


	/* Create the queue receive task as described in the comments at the top
	of this	file.  http://www.freertos.org/a00125.html */
	xTaskCreate( 	prvQueueReceiveTask,			/* The function that implements the task. */
 8001fec:	2300      	movs	r3, #0
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2246      	movs	r2, #70	; 0x46
 8002000:	491f      	ldr	r1, [pc, #124]	; (8002080 <main+0xf0>)
 8002002:	4820      	ldr	r0, [pc, #128]	; (8002084 <main+0xf4>)
 8002004:	f7fe fe9c 	bl	8000d40 <xTaskGenericCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	prvQueueSendTask,
 8002008:	2300      	movs	r3, #0
 800200a:	9303      	str	r3, [sp, #12]
 800200c:	2300      	movs	r3, #0
 800200e:	9302      	str	r3, [sp, #8]
 8002010:	2300      	movs	r3, #0
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	2301      	movs	r3, #1
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	2246      	movs	r2, #70	; 0x46
 800201c:	491a      	ldr	r1, [pc, #104]	; (8002088 <main+0xf8>)
 800201e:	481b      	ldr	r0, [pc, #108]	; (800208c <main+0xfc>)
 8002020:	f7fe fe8e 	bl	8000d40 <xTaskGenericCreate>
					NULL );


	/* Create the task that is synchronised with an interrupt using the
	xEventSemaphore semaphore. */
	xTaskCreate( 	prvEventSemaphoreTask,
 8002024:	2300      	movs	r3, #0
 8002026:	9303      	str	r3, [sp, #12]
 8002028:	2300      	movs	r3, #0
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2304      	movs	r3, #4
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	2246      	movs	r2, #70	; 0x46
 8002038:	4915      	ldr	r1, [pc, #84]	; (8002090 <main+0x100>)
 800203a:	4816      	ldr	r0, [pc, #88]	; (8002094 <main+0x104>)
 800203c:	f7fe fe80 	bl	8000d40 <xTaskGenericCreate>
					NULL );


	/* Create the software timer as described in the comments at the top of
	this file.  http://www.freertos.org/FreeRTOS-timers-xTimerCreate.html. */
	xExampleSoftwareTimer = xTimerCreate( 	( const signed char * ) "LEDTimer", /* A text name, purely to help debugging. */
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <main+0x108>)
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800204c:	4813      	ldr	r0, [pc, #76]	; (800209c <main+0x10c>)
 800204e:	f7ff fcfb 	bl	8001a48 <xTimerCreate>
 8002052:	6078      	str	r0, [r7, #4]

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xExampleSoftwareTimer, 0 );
 8002054:	f7ff f860 	bl	8001118 <xTaskGetTickCount>
 8002058:	4602      	mov	r2, r0
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fd26 	bl	8001ab4 <xTimerGenericCommand>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8002068:	f7fe ff88 	bl	8000f7c <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 800206c:	e7fe      	b.n	800206c <main+0xdc>
 800206e:	bf00      	nop
 8002070:	20001d64 	.word	0x20001d64
 8002074:	08002488 	.word	0x08002488
 8002078:	20001d68 	.word	0x20001d68
 800207c:	08002494 	.word	0x08002494
 8002080:	080024a4 	.word	0x080024a4
 8002084:	080020fd 	.word	0x080020fd
 8002088:	080024a8 	.word	0x080024a8
 800208c:	080020c5 	.word	0x080020c5
 8002090:	080024ac 	.word	0x080024ac
 8002094:	08002131 	.word	0x08002131
 8002098:	080020a1 	.word	0x080020a1
 800209c:	080024b0 	.word	0x080024b0

080020a0 <vExampleTimerCallback>:
}
/*-----------------------------------------------------------*/

static void vExampleTimerCallback( xTimerHandle xTimer )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	/* The timer has expired.  Count the number of times this happens.  The
	timer that calls this function is an auto re-load timer, so it will
	execute periodically. http://www.freertos.org/RTOS-software-timer.html */
	ulCountOfTimerCallbackExecutions++;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <vExampleTimerCallback+0x20>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <vExampleTimerCallback+0x20>)
 80020b0:	6013      	str	r3, [r2, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20001d6c 	.word	0x20001d6c

080020c4 <prvQueueSendTask>:
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
portTickType xNextWakeTime;
const uint32_t ulValueToSend = 100UL;
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	60bb      	str	r3, [r7, #8]

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
 80020d0:	f7ff f822 	bl	8001118 <xTaskGetTickCount>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time.  http://www.freertos.org/vtaskdelayuntil.html */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	21c8      	movs	r1, #200	; 0xc8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fef0 	bl	8000ec4 <vTaskDelayUntil>

		/* Send to the queue - causing the queue receive task to unblock and
		increment its counter.  0 is used as the block time so the sending
		operation will not block - it shouldn't need to block as the queue
		should always be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0 );
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <prvQueueSendTask+0x34>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	f107 0108 	add.w	r1, r7, #8
 80020ec:	2300      	movs	r3, #0
 80020ee:	2200      	movs	r2, #0
 80020f0:	f7fe fb16 	bl	8000720 <xQueueGenericSend>
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
 80020f4:	e7f0      	b.n	80020d8 <prvQueueSendTask+0x14>
 80020f6:	bf00      	nop
 80020f8:	20001d64 	.word	0x20001d64

080020fc <prvQueueReceiveTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h.  http://www.freertos.org/a00118.html */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <prvQueueReceiveTask+0x2c>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f107 010c 	add.w	r1, r7, #12
 800210c:	2300      	movs	r3, #0
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	f7fe fbfd 	bl	8000910 <xQueueGenericReceive>

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, increment the counter. */
		if( ulReceivedValue == 100UL )
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d1f3      	bne.n	8002104 <prvQueueReceiveTask+0x8>
		{
			/* Count the number of items that have been received correctly. */
			ulCountOfItemsReceivedOnQueue++;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <prvQueueReceiveTask+0x30>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	4a02      	ldr	r2, [pc, #8]	; (800212c <prvQueueReceiveTask+0x30>)
 8002124:	6013      	str	r3, [r2, #0]
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 8002126:	e7ed      	b.n	8002104 <prvQueueReceiveTask+0x8>
 8002128:	20001d64 	.word	0x20001d64
 800212c:	20001d70 	.word	0x20001d70

08002130 <prvEventSemaphoreTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvEventSemaphoreTask( void *pvParameters )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Block until the semaphore is 'given'. */
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <prvEventSemaphoreTask+0x24>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	2300      	movs	r3, #0
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	2100      	movs	r1, #0
 8002144:	f7fe fbe4 	bl	8000910 <xQueueGenericReceive>

		/* Count the number of times the semaphore is received. */
		ulCountOfReceivedSemaphores++;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <prvEventSemaphoreTask+0x28>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	4a02      	ldr	r2, [pc, #8]	; (8002158 <prvEventSemaphoreTask+0x28>)
 8002150:	6013      	str	r3, [r2, #0]
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
 8002152:	e7f1      	b.n	8002138 <prvEventSemaphoreTask+0x8>
 8002154:	20001d68 	.word	0x20001d68
 8002158:	20001d74 	.word	0x20001d74

0800215c <vApplicationTickHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <vApplicationTickHook+0x3c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <vApplicationTickHook+0x3c>)
 800216e:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <vApplicationTickHook+0x3c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002178:	d309      	bcc.n	800218e <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <vApplicationTickHook+0x40>)
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	1d3a      	adds	r2, r7, #4
 8002180:	2300      	movs	r3, #0
 8002182:	2100      	movs	r1, #0
 8002184:	f7fe fb68 	bl	8000858 <xQueueGenericSendFromISR>
		ulCount = 0UL;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <vApplicationTickHook+0x3c>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20001d78 	.word	0x20001d78
 800219c:	20001d68 	.word	0x20001d68

080021a0 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80021a4:	e7fe      	b.n	80021a4 <vApplicationMallocFailedHook+0x4>

080021a6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 80021b0:	e7fe      	b.n	80021b0 <vApplicationStackOverflowHook+0xa>

080021b2 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80021b8:	f7fe fa0c 	bl	80005d4 <xPortGetFreeHeapSize>
 80021bc:	4603      	mov	r3, r0
 80021be:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80021c0:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff feba 	bl	8001f48 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021da:	e003      	b.n	80021e4 <LoopCopyDataInit>

080021dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80021de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021e2:	3104      	adds	r1, #4

080021e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80021e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021ec:	d3f6      	bcc.n	80021dc <CopyDataInit>
  ldr  r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80021f0:	e002      	b.n	80021f8 <LoopFillZerobss>

080021f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021f4:	f842 3b04 	str.w	r3, [r2], #4

080021f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80021fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021fc:	d3f9      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021fe:	f000 f811 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f000 f8dd 	bl	80023c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002206:	f7ff fec3 	bl	8001f90 <main>
  bx  lr    
 800220a:	4770      	bx	lr
  ldr  r3, =_sidata
 800220c:	080024f0 	.word	0x080024f0
  ldr  r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002214:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8002218:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800221c:	20001dfc 	.word	0x20001dfc

08002220 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <SystemInit+0x7c>)
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <SystemInit+0x7c>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002238:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <SystemInit+0x80>)
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <SystemInit+0x80>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <SystemInit+0x80>)
 8002246:	2200      	movs	r2, #0
 8002248:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <SystemInit+0x80>)
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <SystemInit+0x80>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <SystemInit+0x80>)
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <SystemInit+0x80>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <SystemInit+0x80>)
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <SystemInit+0x80>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002270:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <SystemInit+0x80>)
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <SystemInit+0x80>)
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f023 030f 	bic.w	r3, r3, #15
 800227c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800227e:	4909      	ldr	r1, [pc, #36]	; (80022a4 <SystemInit+0x80>)
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <SystemInit+0x80>)
 8002282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <SystemInit+0x84>)
 8002286:	4013      	ands	r3, r2
 8002288:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x80>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002290:	f000 f80c 	bl	80022ac <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <SystemInit+0x7c>)
 8002296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229a:	609a      	str	r2, [r3, #8]
#endif  
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	ff00fccc 	.word	0xff00fccc

080022ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80022ba:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <SetSysClock+0x10c>)
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <SetSysClock+0x10c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <SetSysClock+0x10c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3301      	adds	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d103      	bne.n	80022e4 <SetSysClock+0x38>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80022e2:	d1f0      	bne.n	80022c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <SetSysClock+0x10c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80022f0:	2301      	movs	r3, #1
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	e001      	b.n	80022fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d155      	bne.n	80023ac <SetSysClock+0x100>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <SetSysClock+0x110>)
 8002302:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <SetSysClock+0x110>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f043 0310 	orr.w	r3, r3, #16
 800230a:	6013      	str	r3, [r2, #0]
    
    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800230c:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <SetSysClock+0x110>)
 800230e:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <SetSysClock+0x110>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;  
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <SetSysClock+0x110>)
 800231a:	4b28      	ldr	r3, [pc, #160]	; (80023bc <SetSysClock+0x110>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	6013      	str	r3, [r2, #0]
	 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <SetSysClock+0x10c>)
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <SetSysClock+0x10c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <SetSysClock+0x10c>)
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <SetSysClock+0x10c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <SetSysClock+0x10c>)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <SetSysClock+0x10c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6053      	str	r3, [r2, #4]
    
   
     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <SetSysClock+0x10c>)
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <SetSysClock+0x10c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800234a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 800234c:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <SetSysClock+0x10c>)
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <SetSysClock+0x10c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002356:	6053      	str	r3, [r2, #4]
    RCC->CFGR2 &= (uint32_t)((uint32_t)~(RCC_CFGR2_PREDIV1));
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <SetSysClock+0x10c>)
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <SetSysClock+0x10c>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f023 030f 	bic.w	r3, r3, #15
 8002362:	62d3      	str	r3, [r2, #44]	; 0x2c
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV1_DIV1);
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <SetSysClock+0x10c>)
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <SetSysClock+0x10c>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <SetSysClock+0x10c>)
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <SetSysClock+0x10c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002376:	6013      	str	r3, [r2, #0]
    
    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002378:	bf00      	nop
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <SetSysClock+0x10c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f9      	beq.n	800237a <SetSysClock+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <SetSysClock+0x10c>)
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <SetSysClock+0x10c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 0303 	bic.w	r3, r3, #3
 8002390:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <SetSysClock+0x10c>)
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <SetSysClock+0x10c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6053      	str	r3, [r2, #4]
    
    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800239e:	bf00      	nop
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SetSysClock+0x10c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d1f9      	bne.n	80023a0 <SetSysClock+0xf4>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40022000 	.word	0x40022000

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	4e0d      	ldr	r6, [pc, #52]	; (80023f8 <__libc_init_array+0x38>)
 80023c4:	4c0d      	ldr	r4, [pc, #52]	; (80023fc <__libc_init_array+0x3c>)
 80023c6:	1ba4      	subs	r4, r4, r6
 80023c8:	10a4      	asrs	r4, r4, #2
 80023ca:	2500      	movs	r5, #0
 80023cc:	42a5      	cmp	r5, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	4e0b      	ldr	r6, [pc, #44]	; (8002400 <__libc_init_array+0x40>)
 80023d2:	4c0c      	ldr	r4, [pc, #48]	; (8002404 <__libc_init_array+0x44>)
 80023d4:	f000 f87c 	bl	80024d0 <_init>
 80023d8:	1ba4      	subs	r4, r4, r6
 80023da:	10a4      	asrs	r4, r4, #2
 80023dc:	2500      	movs	r5, #0
 80023de:	42a5      	cmp	r5, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023e8:	4798      	blx	r3
 80023ea:	3501      	adds	r5, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023f2:	4798      	blx	r3
 80023f4:	3501      	adds	r5, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	080024e8 	.word	0x080024e8
 80023fc:	080024e8 	.word	0x080024e8
 8002400:	080024e8 	.word	0x080024e8
 8002404:	080024ec 	.word	0x080024ec

08002408 <memcmp>:
 8002408:	b510      	push	{r4, lr}
 800240a:	3901      	subs	r1, #1
 800240c:	4402      	add	r2, r0
 800240e:	4290      	cmp	r0, r2
 8002410:	d101      	bne.n	8002416 <memcmp+0xe>
 8002412:	2000      	movs	r0, #0
 8002414:	bd10      	pop	{r4, pc}
 8002416:	f810 3b01 	ldrb.w	r3, [r0], #1
 800241a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800241e:	42a3      	cmp	r3, r4
 8002420:	d0f5      	beq.n	800240e <memcmp+0x6>
 8002422:	1b18      	subs	r0, r3, r4
 8002424:	bd10      	pop	{r4, pc}

08002426 <memcpy>:
 8002426:	b510      	push	{r4, lr}
 8002428:	1e43      	subs	r3, r0, #1
 800242a:	440a      	add	r2, r1
 800242c:	4291      	cmp	r1, r2
 800242e:	d100      	bne.n	8002432 <memcpy+0xc>
 8002430:	bd10      	pop	{r4, pc}
 8002432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800243a:	e7f7      	b.n	800242c <memcpy+0x6>

0800243c <memset>:
 800243c:	4402      	add	r2, r0
 800243e:	4603      	mov	r3, r0
 8002440:	4293      	cmp	r3, r2
 8002442:	d100      	bne.n	8002446 <memset+0xa>
 8002444:	4770      	bx	lr
 8002446:	f803 1b01 	strb.w	r1, [r3], #1
 800244a:	e7f9      	b.n	8002440 <memset+0x4>

0800244c <strncpy>:
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	4604      	mov	r4, r0
 8002450:	b902      	cbnz	r2, 8002454 <strncpy+0x8>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	4623      	mov	r3, r4
 8002456:	f811 5b01 	ldrb.w	r5, [r1], #1
 800245a:	f803 5b01 	strb.w	r5, [r3], #1
 800245e:	1e56      	subs	r6, r2, #1
 8002460:	b91d      	cbnz	r5, 800246a <strncpy+0x1e>
 8002462:	4414      	add	r4, r2
 8002464:	42a3      	cmp	r3, r4
 8002466:	d103      	bne.n	8002470 <strncpy+0x24>
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	461c      	mov	r4, r3
 800246c:	4632      	mov	r2, r6
 800246e:	e7ef      	b.n	8002450 <strncpy+0x4>
 8002470:	f803 5b01 	strb.w	r5, [r3], #1
 8002474:	e7f6      	b.n	8002464 <strncpy+0x18>
 8002476:	0000      	movs	r0, r0
 8002478:	454c4449 	.word	0x454c4449
 800247c:	00000000 	.word	0x00000000
 8002480:	20726d54 	.word	0x20726d54
 8002484:	00637653 	.word	0x00637653
 8002488:	6e69614d 	.word	0x6e69614d
 800248c:	75657551 	.word	0x75657551
 8002490:	00000065 	.word	0x00000065
 8002494:	65764578 	.word	0x65764578
 8002498:	6553746e 	.word	0x6553746e
 800249c:	6870616d 	.word	0x6870616d
 80024a0:	0065726f 	.word	0x0065726f
 80024a4:	00007852 	.word	0x00007852
 80024a8:	00005854 	.word	0x00005854
 80024ac:	006d6553 	.word	0x006d6553
 80024b0:	5444454c 	.word	0x5444454c
 80024b4:	72656d69 	.word	0x72656d69
 80024b8:	00000000 	.word	0x00000000

080024bc <ucExpectedStackBytes.7194>:
 80024bc:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 80024cc:	a5a5a5a5                                ....

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
