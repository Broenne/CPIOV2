/*
 * Can.c
 *
 *  Created on: 22.11.2018
 *      Author: MB
 */

#include "can.h"

extern CAN_HandleTypeDef hcan2;



/*
 * Created on: 30.11.18
 * Author: MB
 * Grundfunktion zum senden einer standard can-message im normalen
 * ID-Bereich
 * */
void SendCan(uint32_t id, uint8_t data[], uint8_t len) {

	//CanTxMsgTypeDef
	CanTxMsgTypeDef canMessage;
	canMessage.StdId = id;
	canMessage.ExtId = 0;
	canMessage.RTR = CAN_RTR_DATA;
	canMessage.IDE = CAN_ID_STD;
	canMessage.DLC = len;

	memcpy(canMessage.Data, data, len * sizeof(uint8_t));

	int i = 0;
	while (hcan2.State != HAL_CAN_STATE_READY) {
		++i;
		if (i > 10) {
			SetCanSendError();
			break;
		}

		vTaskDelay(20);
	}

	hcan2.pTxMsg = &canMessage;

	//printf("Send can end\r\n");
	if (HAL_CAN_Transmit(&hcan2, 10) != HAL_OK) {
		SetCanSendError();
	}
}







 void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{


 	 if(hcan->Instance == CAN2){
		printf("hello can interrupt 2 id: %d  data1  %d \r\n ", hcan->pRxMsg->StdId, hcan->pRxMsg->Data[0]);


		////	// default id 0
			if (0x00 == hcan->pRxMsg->StdId) {
					switch (hcan->pRxMsg->Data[0]) {
						case 0x01:
							SetGlobalCanNodeId(hcan->pRxMsg->Data[1]);
							printf("Incoming id 0x00 %d", GetGlobalCanNodeId());
							break;
						case 0x02:
							ActivateDebug(hcan->pRxMsg->Data[1]);
						default:
							break;
					}
			}
		////
			// eigene can id
			if(GetGlobalCanNodeId()==hcan->pRxMsg->StdId){
					if(0x02 == hcan->pRxMsg->RTR){
						// todo mb: über que wegschreiben NIEMALS IN ITERRUPT!!!!!
						uint8_t data[2];
						GetInputs(data);
						SendCan(GetGlobalCanNodeId(), data, 2);
						//printf("ddd %i", data[1]);
					}

					if(SET_TIMER_CALIBRATION_CMD == hcan->pRxMsg->Data[0]){
						SetTimerPulseCorrecturFactor(0); // todo mb: datnfed in int 16 wandeln
					}

			}



	 }

	 __HAL_CAN_ENABLE_IT(&hcan2, CAN_IT_EWG |
	 		                            CAN_IT_EPV |
	 		                            CAN_IT_BOF |
	 		                            CAN_IT_LEC |
	 		                            CAN_IT_ERR |
	 		                            CAN_IT_TME  );

	 __HAL_CAN_ENABLE_IT(&hcan2, CAN_IT_FOV0 | CAN_IT_FMP0);
}






