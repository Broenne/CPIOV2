/*
 * pulse.c
 *
 *  Created on: 29.11.2018
 *      Author: MB
 */

#include "pulse.h"

#define QUEUE_SIZE_FOR_PULSE_INFO		( ( unsigned short ) 80 ) // 16 * 5

typedef struct {
	uint8_t channel;
	uint32_t res;
} MessageForSend;

static TIM_HandleTypeDef pulseTimerInstance; // = { .Instance = TIM2 };

static xQueueHandle PulsQueue = NULL;
uint32_t PreemptPriorityPulseTimer = 5;
uint32_t SubPriorityPulseTimer = 0;


static uint32_t TimerCorrectureFactor = 0;

void InitTimerPulseCorrecturFactor(){
	TimerCorrectureFactor = 0; // todo mb: load from eeprom
}

void SetTimerPulseCorrecturFactor(uint16_t value){
	// Info, hier nur int 16 erlaubt, korrektur sonst viel zu groß. Sollen wir den Bereich noch einschränken?
	TimerCorrectureFactor = (uint16_t)value;
	Reset();
}

uint32_t GetTimerPulseCorrecturFactor(){
	return TimerCorrectureFactor;
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Initialisierung des Timers für die internen Zeitmessung.
 * Bei jedem Aufruf wird der Zeitstempel inkrementiert
 * und die Eingänge werden ausgelesen.
 * */
void Init_TimerForPulsTime(void) {

	// calculate:
	// updateFrequenz = Clock/((PSC-1)*(Period-1)
	InitTimerPulseCorrecturFactor();

	__HAL_RCC_TIM3_CLK_ENABLE()	;
	pulseTimerInstance.Instance = TIM3;
	pulseTimerInstance.Init.CounterMode = TIM_COUNTERMODE_UP;

//	pulseTimerInstance.Init.Prescaler = 9;
//	pulseTimerInstance.Init.Period = 801;// + GetTimerPulseCorrecturFactor();

	pulseTimerInstance.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	pulseTimerInstance.Init.Prescaler = 1;
	pulseTimerInstance.Init.AutoReloadPreload = 36000;
//


	pulseTimerInstance.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	pulseTimerInstance.Init.RepetitionCounter = 0;
	//s_TimerInstance.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;//TIM_AUTORELOAD_PRELOAD_ENABLE;//
	if (HAL_TIM_Base_Init(&pulseTimerInstance) != HAL_OK) {
		//_Error_Handler(__FILE__, __LINE__);
	}

	HAL_TIM_Base_Start(&pulseTimerInstance);
	HAL_NVIC_SetPriority(TIM3_IRQn, PreemptPriorityPulseTimer, SubPriorityPulseTimer); // extrem hohe priorität sollte es sein!!!
	HAL_NVIC_EnableIRQ(TIM3_IRQn);

	__HAL_TIM_ENABLE_IT(&pulseTimerInstance, TIM_IT_UPDATE);
}

//osMessageQId myQueue01Handle;

void InitQueueForPulse(void) {
	PulsQueue = xQueueCreate(QUEUE_SIZE_FOR_PULSE_INFO, sizeof(MessageForSend));
//	  osMessageQDef(myQueue01, 16, uint16_t);
//	  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
}

void InitPulse(void) {
	InitQueueForPulse();
	InitPulseSender();
	//InitInputs(); // todo mb: das in main
	Init_TimerForPulsTime();
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Diese Funktion arbeitet die queue ab.
 * Es besteht keine Priorität und es ist darauf zu achten, das de Prozessor ausreichend Zeit hat, die Information los zu werden.
 * */
void SendPulsePerCanTask(void * pvParameters) {

	while (1) {
		static MessageForSend currentMessage;
		currentMessage.channel = 0;
		currentMessage.res = 1;
		/* Wait for the maximum period for data to become available on the queue.
		 The period will be indefinite if INCLUDE_vTaskSuspend is set to 1 in
		 FreeRTOSConfig.h. */
		if (xQueueReceive(PulsQueue, &currentMessage, 100) == pdTRUE) {
		//if (xQueueReceiveFromISR(PulsQueue, &currentMessage, (BaseType_t *)(SubPriorityPulseTimer+SubPriorityPulseTimer-1)) == pdTRUE) {
			//printf("Received %d %d \r\n", currentMessage.channel, currentMessage.res);
			SendCanTimeDif(currentMessage.channel, currentMessage.res);
		}
		else{
			//vTaskDelay(10);
		}

	}

	printf("Sender task error \r\n");
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Funktion zum initailiserne der Queue zum senden der Impulsinformation.

 * */

osThreadId myTask03Handle;
/*
 * Created on: 30.11.18
 * Author: MB
 * Diese Funktion initialisiert die Queue
 * Diese und startet den task um diese abzuarbeiten.
 * */
void InitPulseSender(void) {

	//  /* Create the thread(s) */
	//  /* definition and creation of defaultTask */
	osThreadDef(PulseTask, SendPulsePerCanTask, osPriorityNormal, 0, 128);
	myTask03Handle = osThreadCreate(osThread(PulseTask), NULL);
	// todo mb: wann und wie den task deleten?
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Diese Funktion kalkuliert den time stamp und schiebt in eine FIFO queue.
 * Das wegsenden z.B. per CAN-BUS gehört nicht zur Aufgabe.
 * Diese Funktion läuft im interrupt handling.
 * */
void SendTimeInfo(uint8_t channel) {
	uint32_t actualTimeValue = tickMs;
	uint32_t res;
	if (actualTimeValue > lastTimeValue[channel]) {
		res = actualTimeValue - lastTimeValue[channel];
	} else {
		res = lastTimeValue[channel] - actualTimeValue;
	}

	// printf("SendTimeInfo %d \r\n", channel);
	static MessageForSend messageForSend;
	messageForSend.channel = channel;
	messageForSend.res = res;

	if (xQueueSendFromISR(PulsQueue, &messageForSend, 0) != pdTRUE) {
		SetPossiblePulseSendQueueFullError();
	}

	lastTimeValue[channel] = actualTimeValue;
}


void CheckPulseInputs(void){
	static uint16_t oldValue = 0;
	static uint8_t data[2];
	static uint16_t value = 0;
	ReadInputs(&data[0]);
	value = data[0];
	value = value | (data[1] << 8);
	if (value != oldValue) {
		uint16_t dif = value ^ oldValue;
		for (int i = 0; i < 16; ++i) {
			if ((dif >> i) & 0x01 && (value >> i & 0x01)) {
				SendTimeInfo(i);
			}
		}
	}

	oldValue = value;
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Interrupt handler von timer 3
 * Es wird der counter inkrementiert, welcher den timestamp wiederspiegelt.
 * Danach lesen der Eingänge und ggf Information an queue übergeben zum wegsenden.
 * */
void TIM3_IRQHandler(void) {

	portDISABLE_INTERRUPTS();

	++tickMs;
	CheckPulseInputs();

	//__HAL_TIM_CLEAR_FLAG(&pulseTimerInstance, TIM_FLAG_UPDATE);

	portENABLE_INTERRUPTS();
}
