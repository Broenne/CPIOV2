/*
 * analog.c
 *
 *  Created on: 12.12.2018
 *      Author: MB
 */

#include "analog.h"

extern UART_HandleTypeDef huart1;

static osThreadId uartTaskHandle;
;
uint8_t text;

#define ANA_CHANNEL_COMMAND "AnaCh"




void SendAnalogValue(char* data, int len) {

	for (int i = 15; 0 != i; --i) {
		char cmp[sizeof(ANA_CHANNEL_COMMAND) + 2];
		strcpy(cmp, ANA_CHANNEL_COMMAND);
		char str[2];
		sprintf(str, "%d", i);
		strcat(cmp, str);

		static char resString[20];
		if (0 == strncmp(data, cmp, len)) {
			int res = ReadChannelAnalog((uint)i);
			sprintf(resString, "%d  \r\n", res);
			// vTaskDelay(20);
			//printf(resString);
			break;
		}
	}
}

void ReadUartTask(void) {
	char inputData[50];
	int pos = 0;
	//std::string cmd;

	while (1) {
		if (HAL_UART_Receive(&huart1, &text, sizeof(text), 10) == HAL_OK) {

			if (text == '\n') {
				// clear all, NULL-terminierter String

				SendAnalogValue(inputData, pos);
				pos = 0;
				continue;

			} else {
				inputData[pos] = text;
			}

			++pos;

		} else {

			// printf("no data \r\n");
		}
	}
}

void InitAnalog(void) {
	// ghört das uart hier rein? am besten nochmal abstrahieren
	osThreadDef(UartTask, ReadUartTask, osPriorityNormal, 0, 128);
	uartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
}
