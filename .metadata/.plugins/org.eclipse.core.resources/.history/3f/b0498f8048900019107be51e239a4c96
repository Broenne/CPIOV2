/*
 * pulse.c
 *
 *  Created on: 29.11.2018
 *      Author: MB
 */

#include "pulse.h"

#define QUEUE_SIZE_FOR_PULSE_INFO		( ( unsigned short ) 32 ) // 16*5

typedef struct MessageType {
	uint16_t channel;
	uint16_t checkSum;
	uint32_t res;
} MessageForSend;

static TIM_HandleTypeDef pulseTimerInstance;

static xQueueHandle PulsQueue = NULL;
uint32_t PreemptPriorityPulseTimer = 5;
uint32_t SubPriorityPulseTimer = 0;

osThreadId myTask03Handle;

/*
 * Created on: 30.11.18
 * Author: MB
 * Initialisierung des Timers für die internen Zeitmessung.
 * Bei jedem Aufruf wird der Zeitstempel inkrementiert
 * und die Eingänge werden ausgelesen.
 * */
void Init_TimerForPulsTime(void) {

	// calculate:
	// f / fclock / Period*(Pre+1))
	__HAL_RCC_TIM3_CLK_ENABLE()
	;
	pulseTimerInstance.Instance = TIM3;
	pulseTimerInstance.Init.CounterMode = TIM_COUNTERMODE_UP;

	pulseTimerInstance.Init.Prescaler = 8;
	pulseTimerInstance.Init.Period = 800;

	pulseTimerInstance.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	pulseTimerInstance.Init.RepetitionCounter = 0;
	pulseTimerInstance.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&pulseTimerInstance) != HAL_OK) {
		SetInitPulseTimerError();
	}

	HAL_TIM_Base_Start_IT(&pulseTimerInstance);

	HAL_NVIC_SetPriority(TIM3_IRQn, PreemptPriorityPulseTimer, SubPriorityPulseTimer); // extrem hohe priorität sollte es sein!!!
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
}

//struct MessageType *pMessageForSend;
/*
 * Created on: 12.02.19
 * Author: MB
 * Initialisierung die freertos quee für die pulse information.
 * */
void InitQueueForPulse(void) {

	int size = sizeof(struct MessageType);

	PulsQueue = xQueueCreate(QUEUE_SIZE_FOR_PULSE_INFO, size);

	if (PulsQueue == 0) {
		myPrintf("error create pulse queue"); // Failed to create the queue.
	}

}

void InitPulse(void) {
	InitQueueForPulse();
	InitPulseSender();
	Init_TimerForPulsTime();
	InitChannelModi();
}

void HandleFlipFlops(uint16_t channel) {
	// Besonderheit FlipFlop (Zweite Schleife, da die obere ggf gebreakt wird)
	for (int i = 0; i < CHANNEL_COUNT; ++i) {
		ChannelModiType channelModi = GetChannelModiByChannel(i);
		if (i == channel) {
			switch (channelModi) {
			case Qmin:
				SetFlipFlopQmin(i);
				break;
			case Qmax:
				SetFlipFlopQmax(i);
				break;
			default:
				break;

			}
		}
	}
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Diese Funktion arbeitet die queue ab.
 * Es besteht keine Priorität und es ist darauf zu achten, das de Prozessor ausreichend Zeit hat, die Information los zu werden.
 * Es werden nur die eingesellten und passend konfigurierten Infos weg gesendet.
 * */
void SendPulsePerCanTask(void * pvParameters) {
	while (1) {
		MessageForSend currentMessage;
		if (xQueueReceive(PulsQueue, (void*)&currentMessage, 100) == pdTRUE) {
			for (int i = 0; i < CHANNEL_COUNT; ++i) {
				static ChannelModiType channelModi; // voraussetzung, channels muss dem eingang entsprechen!!
				channelModi = GetChannelModiByChannel(i);

				if (i == currentMessage.channel && channelModi == GetActiveChannelModiType()) {
					SendCanTimeDif(currentMessage.channel, currentMessage.res, currentMessage.checkSum);
					break; // schleife kann dann beendet werden
				}
			}

			HandleFlipFlops(currentMessage.channel);
		}
	}

	SetPulseSenderTaskError();
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Diese Funktion initialisiert die Queue
 * Diese und startet den task um diese abzuarbeiten.
 * */
void InitPulseSender(void) {

	//  /* Create the thread(s) */	//  /* definition and creation of defaultTask */
	osThreadDef(PulseTask, SendPulsePerCanTask, osPriorityNormal, 0, 128);
	myTask03Handle = osThreadCreate(osThread(PulseTask), NULL);
	// todo mb: wann und wie den task deleten?
}

/*
 * Created on: 30.11.18
 * Author: MB
 * Diese Funktion kalkuliert den time stamp und schiebt in eine FIFO queue.
 * Das wegsenden z.B. per CAN-BUS gehört nicht zur Aufgabe.
 * Diese Funktion läuft im interrupt handling.
 * */
void SendTimeInfo(uint8_t channel) {
	uint32_t actualTimeValue = tickMs;
	uint32_t res;
	if (actualTimeValue > lastTimeValue[channel]) {
		res = actualTimeValue - lastTimeValue[channel];
	} else {
		res = lastTimeValue[channel] - actualTimeValue;
	}

	static uint16_t CheckCounter[CHANNEL_COUNT];
	MessageForSend messageForSend;
	messageForSend.channel = channel;
	messageForSend.res = res;
	messageForSend.checkSum = CheckCounter[channel];
	++CheckCounter[channel];
	if ((0xFF + 1) == CheckCounter[channel]) {
		CheckCounter[channel] = 0x00;
	}

	struct MessageType *pMessageForSend;
	pMessageForSend = &messageForSend;
	if (xQueueSendFromISR(PulsQueue, ( void * ) pMessageForSend, 0) != pdTRUE) {
		SetPossiblePulseSendQueueFullError();
	}

	lastTimeValue[channel] = actualTimeValue;
}

/*
 * Created on: 12.02.19
 * Author: MB
 * Service for check if there is a rising pulse.
 * */
void CheckPulseInputs(void) {
	static uint16_t oldValue = 0;
	static uint8_t data[2];
	static uint16_t value = 0;

	ReadInputs(&data[0]);

	value = data[0];
	value = value | (data[1] << 8);
	if (value != oldValue) {
		uint16_t dif = value ^ oldValue;
		for (int i = 0; i < 16; ++i) {
			if ((dif >> i) & 0x01 && (value >> i & 0x01)) {

				SendTimeInfo(i);
			}
		}
	}

	oldValue = value;
}

uint32_t GetTicks(){
	return tickMs;
}


/*
 * Created on: 30.11.18
 * Author: MB
 * Interrupt handler von timer 3
 * Es wird der counter inkrementiert, welcher den timestamp wiederspiegelt.
 * Danach lesen der Eingänge und ggf Information an queue übergeben zum wegsenden.
 * */
void TIM3_IRQHandler(void) {

	portDISABLE_INTERRUPTS();

	++tickMs;
	CheckPulseInputs();
	__HAL_TIM_CLEAR_FLAG(&pulseTimerInstance, TIM_FLAG_UPDATE);

	portENABLE_INTERRUPTS();
}
